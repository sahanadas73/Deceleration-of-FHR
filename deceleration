// FHRdece.cpp : Defines the entry point for the console application.


#include "stdafx.h"
#include<iostream>
#include<fstream>
#define ROUND(x)(int(x+0.8))
//#include<cstdio>

#include <math.h>
#include <malloc.h>
#include <stdio.h>
#include <stdlib.h>
#define WIND_LEN 600
#define SLIDE 600
#define THRES_FHR 15
#define THRES_LEN_FHR 60
#define epsilon 20
#define theta 30
#define FLOAT_MIN 300
#define FLOAT_MAX 0

void dec_fhr(float, float *, float *, float);
//void ucpdetect(int, int, int, float *, float);
void ucpdetect(int, int, int, float *, float);
float triangular(int);
float trap(int);
float fnL(int);
float fnR(int);

int main()
{
	int count = 0, i = 0, j = 0, k = 0, p = 0, q = 0, l = 0, time = 0, m, r, counter = 0, Q;
	float UP, FHR, sum = 0.0, avg, avg_new, errf, bl, sums1 = 0.0, BL1, Bline, V, V1, stv, Avg, Sum = 0.0, B, UPbase;
	float *a, *d, *b, *e, *d1, *c, *g;
	int Dec, Var;
	float sum1 = 0.0, sum2 = 0.0, av, miucp;

	int		no_of_feature = 12;
	float	*feature;
	feature = (float *)malloc(no_of_feature*sizeof(float));

	FILE *fp, *fp1, *fp11, *fp12;
	fp = fopen("result1046.txt", "r");
	fp1 = fopen("baseline1046a.txt", "r");

	int ct1 = 0;

	while (!feof(fp1)){
		fscanf(fp1, "%d \t%f \n", &j, &Bline);
		sum1 = sum1 + Bline;
		ct1++;
	}
	fclose(fp1);
	B = sum1 / (float)ct1;


	do{
		counter++;
	} while (fgetc(fp) != EOF);
	fclose(fp);

	a = (float*)malloc(counter*sizeof(float));
	b = (float *)malloc(counter*sizeof(float));
	d = (float *)malloc(counter*sizeof(float));

	i = 0; count = 0; j = 0;
	fp = fopen("result1046.txt", "r");

	while (!feof(fp)){

		fscanf(fp, "%d \t%f \t%f\n", &i, &FHR, &UP);
		*(a + i) = FHR;
		*(b + i) = UP;
		sum2 = sum2 + *(b + i);
		
		if (i >= 7200)
			break;
	}
	printf("\n i=%d\n", i);
	fclose(fp);
	UPbase = sum2 / (float)i;

	printf("\n Baseline=%f\n", B);
	printf("\n UPbase=%f\n", UPbase);

	/*identify deceleration*/
	dec_fhr(B, a, b, UPbase);
	std::getchar();
	return(0);
}

void dec_fhr(float B, float *a, float *b, float UPbase)
{
	int i = 0, lenf, countf = 0, l = 0, k = 0, marker1, marker2 = 0, marker3 = 0;
	float diff = 0.0, valf1, valf2, valf3;
	float d[20000], min;

	for (i = 0; i < 7200; i++){
		if (*(a + 1) != 0)
			d[i] = *(a + i);
		else
			d[i] = -1;
	}

	//for(i=p;i<(p+WINDW_LENT-1);i++){
	for (i = k; i < 7200; i++){
		if (*(a + i) != 0)
			diff = B -  *(a + i);
		
		if (diff >= THRES_FHR){
			countf++;
			marker1 = i;
			valf1 = *(a + i);
			
			//for(;i<(p+WINDW_LENT-1);i++){
			for (; i < 7200; i++){
				if (*(a + i) != 0){
					diff = B - *(a + i);
					
				}
				
				if (diff < THRES_FHR){
					marker2 = i;
					valf2 = *(a + i);
					break;
				}
			}
			//k = i;
			k = marker2;
			lenf = marker2 - marker1;

			if (lenf >= THRES_LEN_FHR){
				min = d[marker1];
				for (l = marker1; l < marker2; l++){
					if ((d[l] <= min) && (d[l] != 0)){
						min = d[l];
						marker3 = l;
						valf3 = d[l];
						//printf("\n  valf3=%f",  valf3);
					}
				}

				//valf3 = min;
				printf("\n marker1=%f\t valf1=%f", marker1/(float)240, valf1);
				printf("\n marker2=%f\t valf2=%f", marker2/(float)240, valf2);
				printf("\n marker3=%f\t valf3=%f", marker3/(float)240, valf3);
				//ucpdetect(marker1, marker2, marker3, b, UPbase);
				ucpdetect(marker1, marker2, marker3, b, UPbase);
			}
			else{
				printf("\n deceleration not present");
			}
			marker1 = 0; marker2 = 0; marker3 = 0;

			}
	}
}

/*void ucpdetect(int marker1, int marker2, int marker3, float *b, float UPbase){
	int i, l, mark1, mark2, mark3, count = 0;
	float  valu1, valu2, valu3;
	float u[7200], max = 0;


	for (i = 0; i < 7200; i++){
		u[i] = *(b + i);
	}

	for (i = marker1 - 10; i <= marker2 + 20; i++){
		if (*(b + i) >= UPbase){
			mark1 = i;
			valu1 = *(b + i);
			//u[i] = *(b + i);


			for (; i < marker2 + 20; i++){
				//	u[i] = *(b + i);

				if (*(b + i) < UPbase){
					mark2 = i;
					//count = 999;
					valu2 = *(b + i);
					break;
				}
			}
		}

		/* to detect proper ucp & discard any spike*/
		/*if ((mark2 - mark1) >= (marker2 - marker1)){
			printf("\n mark1=%d\t valu1=%f", mark1, valu1);
			printf("\n mark2=%d\t valu2=%f", mark2, valu2);
			for (l = mark1; l <= mark2; l++){
				if (u[l] >= max){
					max = u[l];
					mark3 = l;
					valu3 = max;
				}
			}
			printf("\n mark3=%d\t valu3=%f", mark3, valu3);
			break;
		}
		else{
			printf("\n No detectable uterine contraction");
			break;
		}
	}
}*/

void ucpdetect(int marker1, int marker2, int marker3, float *b, float UPbase){
	int i, l, mark1, mark2, mark3, count = 0, T, diff;
	float  valu1, valu2, valu3;
	float u[7200], max = 0;
	float miut, miutrp, miul, miur;

	for (i = 0; i < 7200; i++){
		u[i] = *(b + i);
	}

	for (i = marker1 - 120; i <= marker2 + 20; i++){
		//if (*(b + i) >= UPbase){
		if (*(b + i) >= 20){
			mark1 = i;
			valu1 = *(b + i);

     
			for (; i <= marker2 + 20; i++){

				if ((*(b + i) < 20)){
					mark2 = i;
					diff = i - mark1;
					if ((diff >= 60)){
						valu2 = *(b + i);
						mark2 = i;
						break;
					}
					else{
						while (((i - mark1) <= 60)){
							i++;
						}
						mark2 = i;
						valu2 = *(b + i);
						break;
				}
			}
		}
	}
		//}


		if ((mark1 >= 0) && (mark2 > 0)){
			for (l = mark1; l <= mark2; l++){
				if ((u[l] >= max) && (l!= mark2)){
				//if ((u[l] >= max)){
					max = u[l];
					mark3 = l;
					valu3 = max;
				}
			}
			//printf("\n mark3=%d\t valu3=%f", mark3, valu3);
		}
		

		if ((mark1 >= 0) && (mark2 > 0) && (mark3 > 0)){
			//if ((mark2 - mark1) >= 120){
				printf("\n mark1=%f\t valu1=%f", mark1 / (float)240, valu1);
				printf("\n mark2=%f\t valu2=%f", mark2 / (float)240, valu2);
				printf("\n mark3=%f\t valu3=%f", mark3 / (float)240, valu3);
				T = marker3 - mark3;
				printf("\n T=%d", T);
				miut = triangular(T);
				miul = fnL(T);
				miur = fnR(T);

				if (T >= 0)
					miutrp = trap(T);
				else
					miutrp = 0;

				printf("\n miut = %f", miut);
				printf("\n miutrp = %f", miutrp);
				printf("\n miul = %f", miul);
				printf("\n miur = %f", miur);
				break;
			//}
			//else{
			//	break;
			//}
		}
		//else{
		//	printf("\n no detectable contraction");
		//}
		
	} /*end for*/
}

float triangular(int T){
	int a = -20, m = 0, b = 60;
	float miut;
	float t = T / 4;
	if (t <= a)
		miut = 0;
	else if ((t > a) && (t <= m))
		miut = (t - a) / (m - a);
	else if ((t > m) && (t < b))
		miut = (b - t) / (b - m);
	else if (t > b)
		miut = 0;
	return(miut);
}

float trap(int T){
	int a = 0, b = 60, c = 80, d = 140;
	float miutrp;
	float t = T / 4;
	//if (T < 0)
	//	t = -t;
	if ((t<a) && (t>d))
		miutrp = 0;
	else if ((t >= a) && (t <= b))
		miutrp = (t - a) / (b - a);
	else if ((t >= b) && (t <= c))
		miutrp = 1;
	else if ((t >= c) && (t >= d))
		miutrp = (d - t) / (d - c);
	return(miutrp);
}

float fnL(int T){
	int a = 80, b = 140;
	float miul;
	float t = T / 4;
	if (t < a)
		miul = 0;
	else if ((t >= a) && (t >= b))
		miul = (t - a) / (b - a);
	else if (t > b)
		miul = 1;
	return(miul);
}

float fnR(int T){
	int a = 0, b = -20;
	float miur;
	float t = T / 4;
	if (t > a)
		miur = 0;
	else if ((t >= -20) && (t <= 0))
		miur = (a - t) / (a - b);
	else if (t < b)
		miur = 1;
	return(miur);
}

float * neural_main(char *Net_name, float *trsamp)
{
	double  *tempout, ***w;
	float *out;

	FILE *fp;

	int		*npl, i, j, k, l;

	npl = (int *)malloc(10 * sizeof(int));

	if ((fp = fopen(Net_name, "r")) == NULL)
	{
		printf("hi");
		exit(0);
	}
	fscanf(fp, "%d", &l);


	for (i = 0; i<l + 1; i++)//for input to hidden layer
	{

		fscanf(fp, "%d", &npl[i]);

	}

	w = (double ***)malloc(l*sizeof(double **));
	for (i = 0; i<l; i++)
	{
		w[i] = (double **)malloc((npl[0] + 2)*sizeof(double *));
		for (j = 0; j<npl[0] + 2; j++)
			w[i][j] = (double *)malloc((npl[0] + 2)*sizeof(double));
	}

	for (i = 0; i<l; i++)//for input to hidden layer
	{
		for (j = 0; j<npl[i] + 1; j++)
		{
			for (k = 0; k<npl[i + 1]; k++)
			{
				fscanf(fp, "%lf ", &w[i][j][k]);
			}
		}
	}

	fclose(fp);
	tempout = (double *)malloc(npl[0] * sizeof(double));

	out = (float *)malloc(npl[0] * sizeof(float));

	calcout(npl, l, w, out, trsamp, tempout);
	std::getchar();
	return out;

}

void calcout(int *npl, int ln, double ***w1, float *out, float *samp, double *tempout)
{

	int layer, i, j;
	double sum, a = 0.1;

	for (layer = 0; layer<ln + 1; layer++)//no of layers
	{
		for (i = 0; i<npl[layer]; i++)//no of neurons in that layer
		{
			if (layer == 0)
			{
				out[i] = samp[i];//for input layer
			}
			else
			{
				sum = 0.0;
				for (j = 0; j<npl[layer - 1] + 1; j++)//for neurons of the previous layer
				{
					sum = sum + w1[layer - 1][j][i] * out[j];//-(w1[layer-1][npl[j]][i]*1.0);//for node threshold
				}//80

				tempout[i] = 1.0 / (1.0 + exp(-a*sum));	//calculation of SIGMOID FUNCTION

				//	if(tempout[i]>0.99999||tempout[i]<0.00001)
				//{
				//printf("error %lf",tempout[i]);
				if (tempout[i]>0.99999)
					tempout[i] = 0.99999;
				//	else
				//	tempout[i]=0.00001;
				//getchar();
				//	}
			}//endif
		}//70
		if (layer>0)//if not input layer
		{
			for (i = 0; i<npl[layer]; i++)
			{
				out[i] = tempout[i];//for all neurons of this layer
			} //77
		} //endif
		out[npl[layer]] = 1.0;
	}//75
}
